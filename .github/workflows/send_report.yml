name: Send Daily Telegram Stock Report

on: schedule: - cron: '30 23 * * *'  # 매일 오전 8시 30분 (KST 기준은 UTC+9) workflow_dispatch:

jobs: send-stock-report: runs-on: ubuntu-latest steps: - name: Set up Python uses: actions/setup-python@v4 with: python-version: '3.10'

- name: Install dependencies
    run: |
      pip install requests beautifulsoup4 yfinance pandas scikit-learn joblib matplotlib

  - name: Generate and Send AI-Based Stock Report
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    run: |
      import os
      import requests
      import yfinance as yf
      import pandas as pd
      import matplotlib.pyplot as plt
      from datetime import datetime
      from bs4 import BeautifulSoup
      from sklearn.ensemble import RandomForestClassifier
      import joblib

      def fetch_news_candidates():
          url = 'https://finance.naver.com/news/mainnews.naver'
          response = requests.get(url)
          soup = BeautifulSoup(response.text, 'html.parser')
          keywords = [tag.text.strip() for tag in soup.select('.mainNewsList li a') if len(tag.text.strip()) > 5]
          return keywords[:10]

      def fetch_candidate_stocks():
          return {
              '352820': '에코프로',
              '080220': '제주반도체',
              '402030': '블리츠웨이엔터',
              '161890': '한국콜마',
              '122640': '예스티'
          }

      def extract_features(ticker):
          stock = yf.Ticker(ticker)
          hist = stock.history(period='7d')
          if len(hist) < 2:
              return None
          latest = hist.iloc[-1]
          prev = hist.iloc[-2]
          features = {
              'close': latest['Close'],
              'open': latest['Open'],
              'volume': latest['Volume'],
              'change': (latest['Close'] - prev['Close']) / prev['Close'] * 100,
          }
          return features, hist

      def plot_chart(ticker, hist):
          plt.figure(figsize=(6, 3))
          hist['Close'].plot(title=ticker)
          plt.tight_layout()
          img_path = f"/tmp/{ticker}_chart.png"
          plt.savefig(img_path)
          plt.close()
          return img_path

      def upload_photo(token, chat_id, image_path, caption):
          with open(image_path, 'rb') as img:
              requests.post(
                  f"https://api.telegram.org/bot{token}/sendPhoto",
                  files={"photo": img},
                  data={"chat_id": chat_id, "caption": caption}
              )

      token = os.environ['TELEGRAM_BOT_TOKEN']
      chat_id = os.environ['TELEGRAM_CHAT_ID']

      stock_map = fetch_candidate_stocks()
      features = []
      meta = []
      charts = []

      for code, name in stock_map.items():
          result = extract_features(code)
          if result:
              feat, hist = result
              features.append([feat['close'], feat['open'], feat['volume'], feat['change']])
              meta.append((code, name))
              chart_img = plot_chart(code, hist)
              charts.append((code, name, chart_img))

      model = RandomForestClassifier()
      X = pd.DataFrame(features, columns=['close', 'open', 'volume', 'change'])
      y_dummy = [1, 1, 0, 1, 0]  # 예시 레이블 (실제 적용 시 학습된 모델 사용)
      model.fit(X, y_dummy)
      probs = model.predict_proba(X)[:, 1]

      ranked = sorted(zip(meta, probs, charts), key=lambda x: -x[1])[:3]

      today = datetime.now().strftime('%m월 %d일')
      report = f"\u2705 오늘의 AI 기반 단타 추천 종목 ({today})\n\n"
      for (code, name), prob, (_, _, img_path) in ranked:
          report += f"{name} ({code}) - 상승 확률: {int(prob * 100)}%\n"

      news_keywords = fetch_news_candidates()
      report += "\n%F0%9F%93%8A 주요 이슈 키워드:\n"
      for kw in news_keywords:
          report += f"- {kw}\n"

      requests.post(
          f"https://api.telegram.org/bot{token}/sendMessage",
          data={
              "chat_id": chat_id,
              "text": report,
              "parse_mode": "HTML"
          }
      )

      for (_, name, img_path) in [x[2] for x in ranked]:
          upload_photo(token, chat_id, img_path, f"📊 {name} 주가 차트")
          os.remove(img_path)

