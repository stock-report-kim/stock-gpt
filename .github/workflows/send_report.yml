# .github/workflows/send_report.yml

name: Send Advanced AI Stock Report to Telegram

on:
  workflow_dispatch:
  schedule:
    - cron: '30 23 * * *'  # Îß§Ïùº Ïò§Ï†Ñ 08:30 KST (UTC Í∏∞Ï§Ä 23:30)

jobs:
  send-telegram-report:
    runs-on: ubuntu-latest

    steps:
      - name: Install dependencies
        run: |
          pip install matplotlib yfinance requests beautifulsoup4 lxml openai

      - name: Send AI Stock Report with Chart and News via Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - <<EOF
import requests
import datetime
import yfinance as yf
import matplotlib.pyplot as plt
from bs4 import BeautifulSoup
import openai

# ÌôòÍ≤Ω Î≥ÄÏàò
TOKEN = '${{ secrets.TELEGRAM_BOT_TOKEN }}'
CHAT_ID = '${{ secrets.TELEGRAM_CHAT_ID }}'
OPENAI_API_KEY = '${{ secrets.OPENAI_API_KEY }}'
SEND_MSG_URL = f'https://api.telegram.org/bot{TOKEN}/sendMessage'
SEND_PHOTO_URL = f'https://api.telegram.org/bot{TOKEN}/sendPhoto'
openai.api_key = OPENAI_API_KEY

# ÎÇ†Ïßú
today = datetime.datetime.now().strftime('%Y-%m-%d')

# 1Ô∏è‚É£ AI ÏÑ†Ï†ï Ïú†Îßù Ï¢ÖÎ™© (ÏÉòÌîå)
priority_stocks = ["005930.KS", "086520.KQ", "067310.KQ"]  # ÏÇºÏÑ±Ï†ÑÏûê, ÏóêÏΩîÌîÑÎ°ú, ÌïòÎÇòÎßàÏù¥ÌÅ¨Î°†
stock_names = {"005930.KS": "ÏÇºÏÑ±Ï†ÑÏûê", "086520.KQ": "ÏóêÏΩîÌîÑÎ°ú", "067310.KQ": "ÌïòÎÇòÎßàÏù¥ÌÅ¨Î°†"}

# 2Ô∏è‚É£ Ïã§ÏãúÍ∞Ñ Îâ¥Ïä§ ÌÅ¨Î°§ÎßÅ
def fetch_news(query):
    headers = {'User-Agent': 'Mozilla/5.0'}
    url = f"https://search.naver.com/search.naver?where=news&query={query}"
    res = requests.get(url, headers=headers)
    soup = BeautifulSoup(res.text, 'lxml')
    news_items = soup.select(".list_news div.news_area a.news_tit")
    links = [item['href'] for item in news_items[:3]]
    titles = [item.get_text() for item in news_items[:3]]
    return list(zip(titles, links))

# 3Ô∏è‚É£ Îâ¥Ïä§ ÏöîÏïΩ (OpenAI)
def summarize_news(news_list):
    joined = "\n".join([f"- {title}" for title, _ in news_list])
    prompt = f"Îã§Ïùå Îâ¥Ïä§ Ï†úÎ™©Îì§ÏùÑ ÏöîÏïΩÌïòÍ≥† Ïù¥ÏäàÏôÄ Ìà¨Ïûê Ìè¨Ïù∏Ìä∏Î•º Ï†ïÎ¶¨Ìï¥Ï§ò:\n{joined}"
    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.7,
    )
    return response.choices[0].message.content.strip()

# Ï¢ÖÎ™© Îâ¥Ïä§ ÏàòÏßë Î∞è ÏöîÏïΩ
news_summaries = ""
for code in priority_stocks:
    name = stock_names[code]
    news = fetch_news(name)
    summary = summarize_news(news)
    news_summaries += f"üì∞ {name} Í¥ÄÎ†® ÏöîÏïΩ:\n{summary}\n\n"

# üì© Î©îÏãúÏßÄ ÏûëÏÑ±
message = f"""
üìà Ïò§ÎäòÏùò AI Í∏∞Î∞ò Îã®ÌÉÄ Ïú†ÎßùÏ£º ({today})

‚úÖ ÏµúÏö∞ÏÑ† AI Ï∂îÏ≤ú Ï¢ÖÎ™©:
- ÏÇºÏÑ±Ï†ÑÏûê
- ÏóêÏΩîÌîÑÎ°ú
- ÌïòÎÇòÎßàÏù¥ÌÅ¨Î°†

üöÄ Ïù¥Ïú†:
- Îâ¥Ïä§/Ïù¥Ïäà Í∏∞Î∞ò Î∂ÑÏÑù
- Í±∞ÎûòÎüâ Î∞è Í∏∞Ïà†Ï†Å ÏßÄÌëú Ïù¥ÏÉÅÍ∞êÏßÄ
- GPT-4 Í∏∞Î∞ò Î∂ÑÏÑù Í≤∞Í≥º Ìè¨Ìï®

{news_summaries}
üìä Ï∞®Ìä∏Îäî ÏïÑÎûòÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî.
‚ö†Ô∏è Ï∞∏Í≥†: Î≥∏ Ï†ïÎ≥¥Îäî Ìà¨Ïûê Í∂åÏú†Í∞Ä ÏïÑÎãôÎãàÎã§.
"""

# Î©îÏãúÏßÄ Ï†ÑÏÜ°
requests.post(SEND_MSG_URL, data={'chat_id': CHAT_ID, 'text': message})

# Ï∞®Ìä∏ ÏÉùÏÑ± Î∞è Ï†ÑÏÜ°
for code in priority_stocks:
    stock = yf.Ticker(code)
    hist = stock.history(period="7d")
    plt.figure(figsize=(6, 4))
    plt.plot(hist.index, hist['Close'], marker='o', color='blue')
    plt.title(f"{stock_names[code]} 7ÏùºÍ∞Ñ Ï¢ÖÍ∞Ä")
    plt.xlabel("ÎÇ†Ïßú")
    plt.ylabel("Í∞ÄÍ≤©")
    plt.grid(True)
    filename = f"{code}.png"
    plt.savefig(filename)
    plt.close()

    with open(filename, 'rb') as photo:
        requests.post(SEND_PHOTO_URL, files={'photo': photo}, data={'chat_id': CHAT_ID})
EOF
